<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LuaJIT Source Code Analysis (Part 1): Setting Up the Debugging Environment</title>
    <link href="/2024/12/21/LuaJIT%20Source%20Code%20Analysis%20(Part%201)/"/>
    <url>/2024/12/21/LuaJIT%20Source%20Code%20Analysis%20(Part%201)/</url>
    
    <content type="html"><![CDATA[<p>As is widely known, LuaJIT is a Just-In-Time Compiler (JIT) for the Lua programming language, and it executes Lua code at an impressive speed. However, resources about LuaJIT source code are quite sparse online, so I have to dig in and start reading from scratch.</p><p>Starting anything is always the hardest part. To analyze the source code, the first step is to set up an environment where you can debug your code. Unfortunately, even the initial step has limited references available online, maybe due to the complexity of compilation process.</p><p>First, check out the source code. The official Git repository is as follows:</p><blockquote><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://luajit.org/git/luajit.git<br></code></pre></td></tr></table></figure></blockquote><p>There is also a <a href="https://github.com/LuaJIT/LuaJIT">mirror link</a> on GitHub.</p><p>We plan to use Visual Studio for debugging. LuaJIT provides a script for MSVC compilation called <code>msvcbuild.bat</code>, located in the <code>src</code> directory. By examining this script, we can see the compilation process is divided into three parts. First, it builds a <code>minilua</code>, which is a subset of Lua native code used to determine whether the target platform is 32-bit or 64-bit and to execute Lua scripts for generating platform-specific instructions. Next is <code>buildvm</code>, which generates mappings for various library functions. Finally, it compiles various Lua libraries and produces the final LuaJIT. This script should be executed in the Visual Studio Command Prompt environment. According to the comments from the script, there are four additional compilation options:</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-comment">@rem Open a &quot;Visual Studio Command Prompt&quot; (either x86 or x64).</span><br><span class="hljs-comment">@rem Then cd to this directory and run this script. Use the following</span><br><span class="hljs-comment">@rem options (in order), if needed. The default is a dynamic release build.</span><br><span class="hljs-comment">@rem</span><br><span class="hljs-comment">@rem   nogc64   disable LJ_GC64 mode for x64</span><br><span class="hljs-comment">@rem   debug    emit debug symbols</span><br><span class="hljs-comment">@rem   amalg    amalgamated build</span><br><span class="hljs-comment">@rem   static   static linkage</span><br></code></pre></td></tr></table></figure><p>We don’t need to include these options for our compilation. Additionally, this script performs some cleanup tasks at the end of the build process, removing intermediate codes and compiled objs. Since we want to keep these files for debugging, you may need to comment out this cleanup logic in the script.</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-comment">@REM @del *.obj *.manifest minilua.exe buildvm.exe</span><br><span class="hljs-comment">@REM @del host\buildvm_arch.h</span><br><span class="hljs-comment">@REM @del lj_bcdef.h lj_ffdef.h lj_libdef.h lj_recdef.h lj_folddef.h</span><br></code></pre></td></tr></table></figure><p>For example, in Visual Studio 2022, we first locate the 64-bit Command Prompt:</p><p><img src="https://s2.loli.net/2024/03/02/i1vwOANyfJEhln7.png" alt="Command Prompt"></p><p>Click on it, then <code>cd</code> to the LuaJIT <code>src</code> directory and run the compilation script <code>msvcbuild.bat</code>:</p><p><img src="https://s2.loli.net/2024/03/02/l87WQtLxK5yGvgH.png" alt="msvcbuild.bat"></p><p>The compilation is quick. If everything goes smoothly, you will see a success message in the output at the end.</p><p><img src="https://s2.loli.net/2024/08/24/7hnBpDIdeSfguKc.png" alt="success message"></p><p>In the <code>src</code> directory, you’ll also find the built <code>luajit.exe</code>. Double-click it to run; this is our final Lua virtual machine.</p><p><img src="https://s2.loli.net/2024/03/02/LbANB2kTWYf9Ctp.png" alt="luajit.exe"></p><p>Next, create a new directory at the same level as the <code>src</code> directory to store the Visual Studio project. Open Visual Studio, create a new empty console C++ project, and then add header files and source files from the <code>src</code> directory to the project.</p><p><img src="https://s2.loli.net/2024/03/02/WjAYDX3MBlJdOuE.png" alt="vs project"></p><p>If we press F5 to debug now, we might encounter an error.</p><blockquote><p>error C4996: ‘strerror’: This function or variable may be unsafe. Consider using strerror_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.</p></blockquote><p>This is because LuaJIT source code uses the <code>strerror</code> C API, which is considered unsafe, and the compiler recommends using <code>strerror_s</code> instead. To avoid modifying the source code,  we just simply add the <code>_CRT_SECURE_NO_WARNINGS</code> macro to the project.</p><p><img src="https://s2.loli.net/2024/03/02/qJPHhMzjZcSa83A.png" alt="add preprocessor definitions"></p><p>Try again, the compilation may pass, but you might encounter another error during the linking stage.</p><p><img src="https://s2.loli.net/2024/03/02/Fjg6BvEQKewp5md.png" alt="link error"></p><p>The error indicates that some functions are defined multiple times, all of them are from <code>ljamalg.obj</code>. So check the corresponding source file, <code>ljamalg.c</code>, and we find that it includes several source files directly.</p><p><img src="https://s2.loli.net/2024/03/02/zDZ2um6BXCSxgRe.png" alt="ljamalg.c"></p><p>Back to <code>msvcbuild.bat</code>, you’ll see that <code>ljamalg.c</code> is only compiled when the amalgamation option is enabled.</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat">@<span class="hljs-keyword">if</span> &quot;%<span class="hljs-number">1</span>&quot;==&quot;amalg&quot; <span class="hljs-keyword">goto</span> :AMALGDLL<br>...<br>:AMALGDLL<br><span class="hljs-variable">%LJCOMPILE%</span> <span class="hljs-variable">%LJDYNBUILD%</span> ljamalg.c<br></code></pre></td></tr></table></figure><p>Since we’re not using the amalgamation option, <code>ljamalg.c</code> should be excluded from the VS project. The purpose of the amalgamation option is explained on the LuaJIT website.</p><blockquote><p>The build system has a special target for an amalgamated build, i.e. <code>make amalg</code>. This compiles the LuaJIT core as one huge C file and allows GCC to generate faster and shorter code. Alas, this requires lots of memory during the build. This may be a problem for some users, that’s why it’s not enabled by default. But it shouldn’t be a problem for most build farms. It’s recommended that binary distributions use this target for their LuaJIT builds.</p></blockquote><p>In short, this option compiles the LuaJIT core into a single large C file, allowing the compiler to generate faster and shorter code.</p><p>After removing <code>ljamalg.c</code>, let’s try again, but unfortunately, the linking might still fail.</p><p><img src="https://s2.loli.net/2024/03/02/SqvLX5Fm7pHfZlU.png" alt="unresolved external symbol"></p><p>Recalling the LuaJIT build process, the mappings of various library functions in the VM are handled by <code>buildvm</code>. They don’t have corresponding source code but their generated object file is located in the <code>src</code> directory, which is also managed by the <code>msvcbuild.bat</code> script.</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">buildvm -m peobj -o lj_vm.obj<br></code></pre></td></tr></table></figure><p>This object file should contain the various functions that need to be referenced. So, manually add this to the VS project.</p><p><img src="https://s2.loli.net/2024/03/02/MbxTnQtJq76G18U.png" alt="lj_vm.obj"></p><p>Try again, now LuaJIT should finally start successfully. By default, when debugging, no parameters are provided, so it will receive input from <code>stdin</code>.</p><p><img src="https://s2.loli.net/2024/03/02/xJA26BDUMfRWdKy.png" alt="start LuaJIT"></p><p>Add a breakpoint at the entry point of the <code>main</code> function, and then press F5 again. We should be able to debug LuaJIT successfully.</p><p><img src="https://s2.loli.net/2024/03/02/QjWwD5PcLedIv4t.png" alt="debug LuaJIT"></p><p>Great! Now we can happily delve into the LuaJIT source code.</p>]]></content>
    
    
    <categories>
      
      <category>LuaJIT Source Code Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LuaJIT</tag>
      
      <tag>Lua</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
